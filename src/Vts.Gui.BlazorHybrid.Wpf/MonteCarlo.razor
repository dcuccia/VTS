@namespace Vts.Gui.BlazorHybrid.Wpf
@using Microsoft.AspNetCore.Components.Web

@using Vts.Common
@using Vts.MonteCarlo
@using Vts.MonteCarlo.Detectors
@using Vts.MonteCarlo.Sources
@using Vts.MonteCarlo.Tissues

<h1>Counter</h1>
<p>N:</p>
<input @bind-value="@_input.N" />
<button class="btn btn-primary" @onclick="@(async _ => await RunSimulation(_input))">Run simulation!</button>
@*<MBLinearProgress></MBLinearProgress>*@
@if (!string.IsNullOrWhiteSpace(_progress))
{
    <p>Progress: @_progress</p>
}
@if (_mc?.Results?.R_fx != null)
{
    <p>Output: @_mc.Results.R_fx[0]</p>
}

@code {
    SimulationInput _input;
        MonteCarloSimulation _mc;
        string _progress;

    protected override void OnInitialized()
    {
        // 5 sets of optical properties, varying mua/musp but keeping mutr constant
        var op = (mua: 0.1, musp: 0.9);

        // create a set of inputs for each absorption-reduced scattering pair
        _input = new SimulationInput
            {
                // specify number of photons
                N = 100000,
                SourceInput = new DirectionalPointSourceInput
                { 
                    SourceType = "DirectionalPoint", 
                    PointLocation = new Position(x: 0, y: 0, z: 0),
                    Direction = new Direction(ux: 0, uy: 0, uz: 1),
                    InitialTissueRegionIndex = 0
                },
                TissueInput = new MultiLayerTissueInput
                { 
                    Regions = new ITissueRegion[]
                    {
                        new LayerTissueRegion(
                            zRange: new DoubleRange(double.NegativeInfinity, 0),
                            op: new OpticalProperties(mua: 0.0, musp: 1E-10, g: 1.0, n: 1.0)), // air
                        new LayerTissueRegion(
                            zRange: new DoubleRange(0, 100),
                            op: new OpticalProperties(mua: op.mua, musp: op.musp, g: 0.9, n: 1.4)), // homogeneous tissue (100mm slab)
                        new LayerTissueRegion(
                            zRange: new DoubleRange(100, double.PositiveInfinity),
                            op: new OpticalProperties(mua: 0.0, musp: 1E-10, g: 1.0, n: 1.0)), // air
                    } 
                },
                // specify a single R(rho) detector by the endpoints of rho bins
                DetectorInputs = new IDetectorInput[] { new ROfFxDetectorInput { Fx = new DoubleRange(0, 1, 101), TallySecondMoment = true } },
                Options = new SimulationOptions 
                {
                    Seed = 0,
                    AbsorptionWeightingType = AbsorptionWeightingType.Discrete, 
                    PhaseFunctionType = PhaseFunctionType.HenyeyGreenstein,
                    ProgressUpdateIncrementPercentage = 0.1
                }
            };
    }

    async Task RunSimulation(SimulationInput input)
    {
        _mc = new MonteCarloSimulation(input)
        { 
            ProgressPercentageDone = new Progress<(int index, double percentage, double estimatedSecondsRemaining)>(p =>
            {
                _progress = $"{p.index}: {Math.Round(p.percentage, 1)} percent complete. Estimated time remaining: " + p.estimatedSecondsRemaining switch
                {
                    >= 86400 => $"{Math.Round(p.estimatedSecondsRemaining / 86400, 1)} days",
                    >= 3600  => $"{Math.Round(p.estimatedSecondsRemaining / 3600, 1)} hours",
                    >= 60    => $"{Math.Round(p.estimatedSecondsRemaining / 60, 1)} minutes",
                    _        => $"{Math.Round(p.estimatedSecondsRemaining)} seconds",
                };
                StateHasChanged();
            })
        };
        await Task.Run(_mc.Run);
    }
}